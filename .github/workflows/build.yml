name: Release Build
on:
  release:
    types: [created]
jobs:
  release:
    name: Release - ${{ matrix.release_for }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - release_for: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: dec2bin
            name: dec2bin-Linux-x86_64.tar.gz
            command: build
          - release_for: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: dec2bin
            name: dec2bin-Linux-aarch64.tar.gz
            command: build
          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: dec2bin.exe
            name: dec2bin-Windows-x86_64.zip
            command: build
          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: dec2bin
            name: dec2bin-macOS-x86_64.tar.gz
            command: build
          - release_for: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: dec2bin
            name: dec2bin-macOS-aarch64.tar.gz
            command: build
    runs-on: ${{ matrix.os }}
    env:
        GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.command }}
          target: ${{ matrix.target }}
          args: "--locked --release"
      - name: Package as archive
        shell: bash
        run: |
          cd ./target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ${{ matrix.name }} ${{ matrix.bin }}
          else
            tar czvf ${{ matrix.name }} ${{ matrix.bin }}
          fi
          cd -
      - name: Generate SHA-256 checksum file
        run: |
          cd ./target/${{ matrix.target }}/release
          shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
          cd -
      - name: Upload assets to release
        shell: bash
        run: |
          gh release upload ${{github.event.release.tag_name}} \
             ./target/${{ matrix.target }}/release/${{ matrix.name }} \
             ./target/${{ matrix.target }}/release/${{ matrix.name }}.sha256

  crates_io_publish:
    name: Publish (crates.io)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: cargo-release Cache
        id: cargo_release_cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cargo-release
          key: ${{ runner.os }}-cargo-release

      - run: cargo install cargo-release
        if: steps.cargo_release_cache.outputs.cache-hit != 'true'

      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_API_TOKEN }}

      # allow-branch HEAD is because GitHub actions switches
      # to the tag while building, which is a detached head

      # Publishing is currently messy, because:
      #
      # * `peace_rt_model_core` exports `NativeError` or `WebError` depending on the target.
      # * `peace_rt_model_web` fails to build when publishing the workspace for a native target.
      # * `peace_rt_model_web` still needs its dependencies to be published before it can be
      #    published.
      # * `peace_rt_model_hack` needs `peace_rt_model_web` to be published before it can be
      #    published.
      #
      # We *could* pass through `--no-verify` so `cargo` doesn't build the crate before publishing,
      # which is reasonable, since this job only runs after the Linux, Windows, and WASM builds
      # have passed.
      - name: "cargo release publish"
        run: |-
          cargo release \
            publish \
            --workspace \
            --all-features \
            --allow-branch HEAD \
            --no-confirm \
            --no-verify \
            --execute
